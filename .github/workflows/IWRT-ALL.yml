name: immortalwrt-mt798x  # CI计划

on:
  push:
    branches: [ main, master ]  # 当代码推送到main或master分支时启动工作流
  workflow_dispatch:  # 允许手动触发此工作流
jobs:
  build:
    runs-on: ubuntu-latest  # 使用GitHub提供的最新Ubuntu镜像
    steps:

      # 检出编译配置仓库
      - name: Checkout Projects
        uses: actions/checkout@main

      # 准备编译环境
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive  # 设置环境变量避免安装过程中出现交互式提示
        run: |
          sudo -E apt -yqq purge firefox  # 卸载 Firefox
          sudo -E apt -yqq update  # 更新软件包列表
          sudo -E apt -yqq full-upgrade  # 全面升级系统
          sudo -E apt -yqq autoremove --purge  # 清理无用包
          sudo -E apt -yqq autoclean  # 清理本地缓存
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix python3-netifaces libfuse-dev  # 安装必要工具
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'  # 初始化构建环境
          sudo -E systemctl daemon-reload  # 重载系统服务
          sudo -E timedatectl set-timezone "Asia/Shanghai"  # 设置时区

      # 检出编译源码仓库
      - name: Checkout Third-Party Code  # 检出编译源码
        uses: actions/checkout@main
        with:
          repository: 'padavanonly/immortalwrt-mt798x-6.6'  #目标仓库
          ref: 'openwrt-24.10-6.6'  #目标分支
          path: 'iwrt'  #编译目录

      # GitHub Ations 移除国内下载源
      - name: Remove domestic download sources  #移除国内下载源
        run: |

          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

      #获取源码提交标签
      - name: caches
        run: |
          echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/iwrt

      # 配置 ccache 环境
      - name: Set up ccache #配置ccache环境
        run: |
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          ccache --max-size=2G
          ccache -z  # 重置统计信息
          mkdir -p ~/.ccache

          # 显示初始缓存状态
          echo "=== Initial ccache stats ==="
          ccache -s

      # 缓存加速
      - name: Check Caches  # 缓存ccache
        id: check-cache
        uses: actions/cache@main  # 使用GitHub官方的缓存动作
        with:
          path: |
            ~/.ccache
            ./iwrt/staging_dir/host*
            ./iwrt/staging_dir/tool*
          key: ${{ runner.os }}-immortalwrt-${{ env.WRT_HASH }}  # 缓存键名
          restore-keys: ${{ runner.os }}-immortalwrt-  # 恢复键名前缀

      #更新缓存
      - name: Update Caches
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

          if [ -d "./iwrt/staging_dir" ]; then
            find "./iwrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done

            mkdir -p ./iwrt/tmp && echo "1" > ./iwrt/tmp/.build

            echo "toolchain skiped done!"
          else
            echo "caches missed!"
          fi

          if ${{steps.check-cache.outputs.cache-hit != 'true'}}; then
            CACHE_LIST=$(gh cache list --key "${{ runner.os }}-immortalwrt-" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
              gh cache delete $CACHE_KEY
            done

            echo "caches cleanup done!"
          fi

      # 准备构建环境
      - name: Update Feeds  # 设置编译环境
        run: |
          ./scripots/feeds update -a  # 更新所有feeds
          ./scripts/feeds install -a  # 安装所有feeds中的软件包
        working-directory: ${{ github.workspace }}/iwrt

      # 导入并生成设备Config
      - name: Custom Settings 
        run: |
          # 检查.config文件是否存在复制.config
          if [ -f "$GITHUB_WORKSPACE/Config/.config" ]; then
            cat $GITHUB_WORKSPACE/Config/.config >> .config
          else
            echo "Error: .config file not found in Config directory!"
            exit 1
          fi
          make defconfig -j$(nproc) && make clean -j$(nproc  # 生成默认配置
        working-directory: ${{ github.workspace }}/iwrt

      #下载依赖包
      - name: Download Packages  #下载依赖
        run: |
          make download -j$(nproc) && break  # 并行下载依赖包
        working-directory: ${{ github.workspace }}/iwrt

      # 编译固件
      - name: Compile firmware  # 编译固件
        run: |
          make -j$(nproc) || make -j$(nproc) V=s  # 并行编译
        working-directory: ${{ github.workspace }}/iwrt

      # 显示缓存使用情况
      - name: Show ccache stats
        run: |
          echo "=== Final ccache stats ==="
          ccache -s

      # 发布固件
      - name: Release Firmware  # 发布构建产物
        uses: softprops/action-gh-release@master  # 发布工作流
        with:
          tag_name: v25.8.13
          name: Release v25.8.13
          body: |
            H3C nx30pro 闭源固件
          files: |
            bin/targets/**/*.fip
            bin/targets/**/*.itb
            bin/targets/sha256sums
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}