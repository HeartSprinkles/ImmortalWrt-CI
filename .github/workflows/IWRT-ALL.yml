name: immortalwrt-mt798x  # CI计划

on:
  push:
    tags:
        - "v*.*.*"  # 当推送以'v'开头的标记时触发工作流

  workflow_dispatch:  # 允许手动触发此工作流

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}

#CI权限
permissions: write-all 

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:

      - name: 删除旧的版本和工作流
        uses: ophub/delete-releases-workflows@main
        with:
          gh_token: ${{secrets.GITHUB_TOKEN }}
          delete_releases: true
          releases_keep_latest: 2
          delete_tags: true
          delete_workflows: true
          workflows_keep_day: 3
  build:
    runs-on: ubuntu-latest  # 使用Ubuntu镜像
    steps:

      - name: 检出编译配置仓库
        uses: actions/checkout@main

      - name: 准备编译环境
        env:
          DEBIAN_FRONTEND: noninteractive  # 设置环境变量避免安装过程中出现交互式提示
        run: |
          sudo -E apt -yqq purge firefox  # 卸载 Firefox
          sudo -E apt -yqq update  # 更新软件包列表
          sudo -E apt -yqq full-upgrade  # 全面升级系统
          sudo -E apt -yqq autoremove --purge  # 清理无用包
          sudo -E apt -yqq autoclean  # 清理本地缓存
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix python3-netifaces libfuse-dev  # 安装必要工具
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'  # 初始化构建环境
          sudo -E systemctl daemon-reload  # 重载系统服务
          sudo -E timedatectl set-timezone "Asia/Shanghai"  # 设置时区

      - name: 检出编译源码仓库
        uses: actions/checkout@main  # 检出源码工作流
        with:
          repository: 'padavanonly/immortalwrt-mt798x-6.6'  # 目标仓库
          ref: 'openwrt-24.10-6.6'  # 目标分支
          path: 'iwrt'  # 编译目录

      - name: 移除国内下载源
        run: |

          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

      - name: 初始化变量
        run: |
          echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV  # 获取提交标签
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ../Config/.config)" >> $GITHUB_ENV  # 获取目标设备名称

        working-directory: ${{ github.workspace }}/iwrt

      - name: 配置缓存环境
        run: |
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          ccache --max-size=2G
          ccache -z  # 重置统计信息
          mkdir -p ~/.ccache

          # 显示初始缓存状态
          echo "=== Initial ccache stats ==="
          ccache -s

      - name: 设置缓存加速
        id: check-cache
        uses: actions/cache@main  # 缓存工作流
        with:
          path: |
            ~/.ccache
            ./iwrt/staging_dir/host*
            ./iwrt/staging_dir/tool*
          key: ${{ runner.os }}-immortalwrt-"$WRT_HASH"  # 缓存键名
          restore-keys: ${{ runner.os }}-immortalwrt-  # 恢复键名前缀

      - name: 更新缓存
        run: |

          if [ -d "./iwrt/staging_dir" ]; then
            find "./iwrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done

            mkdir -p ./iwrt/tmp && echo "1" > ./iwrt/tmp/.build

            echo "toolchain skiped done!"
          else
            echo "caches missed!"
          fi

          if ${{steps.check-cache.outputs.cache-hit != 'true' }}; then
            CACHE_LIST=$(gh cache list --key "${{ runner.os }}-immortalwrt-" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
              gh cache delete $CACHE_KEY
            done

            echo "caches cleanup done!"
          fi

      - name: 更新订阅源
        run: |
          ./scripts/feeds update -a  # 更新所有feeds
          ./scripts/feeds install -a  # 安装所有feeds中的软件包
        working-directory: ${{ github.workspace }}/iwrt

      - name: 自定义设置
        run: |
          # 检查.config文件是否存在
          if [ -f "$GITHUB_WORKSPACE/Config/.config" ]; then
            cat $GITHUB_WORKSPACE/Config/.config >> .config  #复制.config
          else
            echo "Error: .config file not found in Config directory!"
            exit 1
          fi
          make defconfig -j$(nproc) && make clean -j$(nproc)  # 生成默认配置
        working-directory: ${{ github.workspace }}/iwrt

      - name: 下载依赖包
        run: |
          make download -j$(nproc) && break  # 并行下载依赖包
        working-directory: ${{ github.workspace }}/iwrt

      - name: 编译固件
        run: |
          make -j$(nproc) || make -j$(nproc) V=s  # 并行编译
        working-directory: ${{ github.workspace }}/iwrt

      - name: 显示缓存统计信息
        run: |
          echo "=== Final ccache stats ==="
          ccache -s

      - name: 打包固件
        run: |
          mkdir ./upload/
          
          cp -f ./.config ./upload/Config-"openwrt-24.10-6.6"-"$RELEASE_TAG".txt

            WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)
            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|bin\|sha256sums\|packages\|manifest\)$" -exec rm -rf {} +

            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              NEW_FILE="openwrt-24.10-6.6"-"$NAME"-"$RELEASE_TAG"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;

            make clean -j$(nproc)
        working-directory: ${{ github.workspace }}/iwrt

      - name: 发布固件
        uses: softprops/action-gh-release@v2  # 发布工作流
        with:
          tag_name: ${{github.ref }}
          name: Release ${{github.ref }}
          body: |
            H3C nx30pro 闭源固件
            源码: padavanonly/immortalwrt-mt798x-6.6
            分支: openwrt-24.10-6.6
            提交: $WRT_HASH
            内核版本: $WRT_KVER
          files: ./iwrt/upload/*.*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') }}
