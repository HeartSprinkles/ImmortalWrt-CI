name: immortalwrt-mt798x  # CI计划

on:
  push:
    branches: [ main, master ]  # 当代码推送到main或master分支时启动工作流
  workflow_dispatch:  # 允许手动触发此工作流
jobs:
  build:
    runs-on: ubuntu-latest  # 使用GitHub提供的最新Ubuntu镜像
    permissions:
      contents: write  # 需要这个权限来创建release
    steps:


      # 检出编译配置仓库
      - name: Checkout Projects
        uses: actions/checkout@main

      # 准备编译环境
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive  # 设置环境变量避免安装过程中出现交互式提示
        run: |
          sudo -E apt -yqq purge firefox  # 卸载 Firefox
          sudo -E apt -yqq update  # 更新软件包列表
          sudo -E apt -yqq full-upgrade  # 全面升级系统
          sudo -E apt -yqq autoremove --purge  # 清理无用包
          sudo -E apt -yqq autoclean  # 清理本地缓存
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix python3-netifaces libfuse-dev  # 安装必要工具
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'  # 初始化构建环境
          sudo -E systemctl daemon-reload  # 重载系统服务
          sudo -E timedatectl set-timezone "Asia/Shanghai"  # 设置时区

      # 检出编译源码仓库
      - name: Checkout Third-Party Code  # 检出编译源码
        uses: actions/checkout@main
        with:
          repository: 'padavanonly/immortalwrt-mt798x-6.6'  # 目标仓库
          ref: 'openwrt-24.10-6.6'  # 目标分支
          path: 'iwrt'  # 编译目录

      # GitHub Ations 移除国内下载源
      - name: Remove domestic download sources  # 移除国内下载源
        run: |

          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

      # 初始化变量
      - name: Initialization Values
        run: |
          echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV  # 获取提交标签
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./Config/.config)" >> $GITHUB_ENV  # 获取目标设备名称

        working-directory: ${{ github.workspace }}/iwrt

      # 生成日期变量
      - name: Generate Date Variables  # 获取日期组件
        id: date
        run: |
          RELEASE_YEAR=$(date +"%y")  # 两位年份 (25)
          RELEASE_MONTH=$(date +"%_m" | xargs)  # 去前导零的月份 (8)
          RELEASE_DAY=$(date +"%_d" | xargs)  # 去前导零的日期 (13)

          # 构建标签和标题
          RELEASE_TAG="v$RELEASE_YEAR.$RELEASE_MONTH.$RELEASE_DAY"
          RELEASE_TITLE="Release $RELEASE_TAG"

          # 注入环境变量
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          echo "RELEASE_TITLE=$RELEASE_TITLE" >> $GITHUB_ENV

      # 配置 ccache 环境
      - name: Set up ccache  # 配置ccache环境
        run: |
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          ccache --max-size=2G
          ccache -z  # 重置统计信息
          mkdir -p ~/.ccache

          # 显示初始缓存状态
          echo "=== Initial ccache stats ==="
          ccache -s

      # 缓存加速
      - name: Check Caches  # 缓存ccache
        id: check-cache
        uses: actions/cache@main  # 使用GitHub官方的缓存动作
        with:
          path: |
            ~/.ccache
            ./iwrt/staging_dir/host*
            ./iwrt/staging_dir/tool*
          key: ${{ runner.os }}-immortalwrt-${{ env.WRT_HASH }}  # 缓存键名
          restore-keys: ${{ runner.os }}-immortalwrt-  # 恢复键名前缀

      #更新缓存
      - name: Update Caches
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

          if [ -d "./iwrt/staging_dir" ]; then
            find "./iwrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done

            mkdir -p ./iwrt/tmp && echo "1" > ./iwrt/tmp/.build

            echo "toolchain skiped done!"
          else
            echo "caches missed!"
          fi

          if ${{steps.check-cache.outputs.cache-hit != 'true'}}; then
            CACHE_LIST=$(gh cache list --key "${{ runner.os }}-immortalwrt-" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
              gh cache delete $CACHE_KEY
            done

            echo "caches cleanup done!"
          fi

      # 准备构建环境
      - name: Update Feeds  # 设置编译环境
        run: |
          ./scripots/feeds update -a  # 更新所有feeds
          ./scripts/feeds install -a  # 安装所有feeds中的软件包
        working-directory: ${{ github.workspace }}/iwrt

      # 导入并生成设备Config
      - name: Custom Settings 
        run: |
          # 检查.config文件是否存在复制.config
          if [ -f "$GITHUB_WORKSPACE/Config/.config" ]; then
            cat $GITHUB_WORKSPACE/Config/.config >> .config
          else
            echo "Error: .config file not found in Config directory!"
            exit 1
          fi
          make defconfig -j$(nproc) && make clean -j$(nproc  # 生成默认配置
        working-directory: ${{ github.workspace }}/iwrt

      # 下载依赖包
      - name: Download Packages  # 下载依赖
        run: |
          make download -j$(nproc) && break  # 并行下载依赖包
        working-directory: ${{ github.workspace }}/iwrt

      # 编译固件
      - name: Compile firmware  # 编译固件
        run: |
          make -j$(nproc) || make -j$(nproc) V=s  # 并行编译
        working-directory: ${{ github.workspace }}/iwrt

      # 显示缓存使用情况
      - name: Show ccache stats
        run: |
          echo "=== Final ccache stats ==="
          ccache -s

      # 整理生成产物预备发布
      - name: Package Firmware
        run: |
          cd ./iwrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config-"openwrt-24.10-6.6"-"$RELEASE_TAG".txt

            echo "WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)" >> $GITHUB_ENV
            echo "WRT_LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | tr '\n' ' ')" >> $GITHUB_ENV

            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|sha256sums\|packages\)$" -exec rm -rf {} +

            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              NEW_FILE="openwrt-24.10-6.6"-"$NAME"-"$RELEASE_TAG"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;

            make clean -j$(nproc)
          fi

      # 发布固件
      - name: Release Firmware  # 发布构建产物
        uses: softprops/action-gh-release@master  # 发布工作流
        with:
          tag_name: ${{ env.RELEASE_TAG }}   # 格式：v25.8.13
          name: ${{ env.RELEASE_TITLE }}     # 格式：Release v25.8.13
          body: |
            H3C nx30pro 闭源固件
            源码: padavanonly/immortalwrt-mt798x-6.6
            分支: openwrt-24.10-6.6
            提交: ${{env.WRT_HASH}}
            内核版本: ${{env.WRT_KVER}}
          files: ./iwrt/upload/*.*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
